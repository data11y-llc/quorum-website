//make 3 radioes colors light, dark, high contrast
// allow radioes to be in a row or column
@use "../../foundations/colors/colors.scss" as *;
$spacing-1: 4px;


$radio-colors: (
  light: (
    unchecked:(
      background-color: map-get($colors, neutral, white),
      border-color: map-get($colors, neutral, grey, 50),
    ),
    checked:(
      background-color: map-get($colors, quorum, blue, 100),
      border-color: map-get($colors, quorum, blue, 100),
      color: map-get($colors, neutral, black),
    ),
    hover:(
      background-color: rgba(map-get($colors, quorum, blue, 100), .5),
    ),
    disabled:(
      background-color: map-get($colors, neutral, white),
      border-color: map-get($colors, neutral, grey, 15),
    ),
    focused:(
      background-color: map-get($colors, quorum, blue, 100),
      border-color: map-get($colors, quorum, blue, 100),
    ),
    label:(
      color: map-get($colors, neutral, black),
      hover-color: map-get($colors, quorum, blue, 100),
    ),
  ),
  dark: (
    unchecked:(
      background-color: map-get($colors, neutral, grey, 95),
      border-color: map-get($colors, neutral, grey, 25),
    ),
    checked:(
      background-color: map-get($colors, quorum, blue, 50),
      border-color:  map-get($colors, quorum, blue, 50),
      color: map-get($colors, neutral, black),
    ),
    hover:(
      background-color: rgba(map-get($colors, quorum, blue, 50), .5),
    ),
    disabled:(
      background-color: map-get($colors, neutral, grey, 50),
      border-color: map-get($colors, neutral, grey, 95),
    ),
    focused-filled:(
      background-color: map-get($colors, quorum, blue, 50),
    ),
    label:(
      color: map-get($colors, text, neutral, grey, 10),
      hover-color: map-get($colors, quorum, blue, 50),
    ),
  ),
  high-contrast: (
    unchecked:(
      background-color: map-get($colors, neutral, black),
      border-color: map-get($colors, neutral, white),
    ),
    checked:(
      background-color: map-get($colors, text, hico, blue),
      border-color: map-get($colors, text, hico, blue),
      color: map-get($colors, neutral, black),
    ),
    hover:(
      background-color: rgba(map-get($colors, text, hico, blue), .5),
    ),
    disabled:(
      background-color: map-get($colors, neutral, black),
      border-color: map-get($colors, neutral, black),
    ),
    focused-filled:(
      background-color: map-get($colors, text, hico, blue),
    ),
    label:(
      color: map-get($colors, neutral, white),
      hover-color: map-get($colors, text, hico, blue),
    ),
  ),
);
// Mixins
@mixin radio-state($color) {

    

  &::before{
    position: absolute;
    top: 50%;
    left: 50%;
    line-height: 24px !important;
  border-radius: 50%;
    text-align: center;
    border:none;
    outline: none;
  }

  &:not(:checked)::after{
    content: "";
    background-color: map-get($color, unchecked, background-color);
    position: absolute;
    top: -2px;
    left: -2px;
    right: -2px;
    bottom: -2px;
    font-size: 20px;
    line-height: 24px !important;
    border-radius: 50%;
    text-align: center;
    outline: map-get($color, unchecked, border-color) auto 2px;
    outline-offset: 2px;
  }

  //if it is checked then make the background red
  &:checked::after {
    content: "";
    background-color: map-get($color, checked, background-color);
    position: absolute;
    top: -2px;
    left: -2px;
    right: -2px;
    bottom: -2px;
    font-size: 20px;
    line-height: 24px !important;
    border-radius: 50%;
    border:none;
    text-align: center;
    outline: map-get($color, checked, border-color) auto 2px;
    outline-offset: 2px;
  }

  &:hover:not(:disabled) {
    //make a big circle around my radio when I hover over it

    &::before {
      color: map-get($color, hover, background-color);
      content: "";
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      z-index: -1;
      width: 30px;
      height: 30px;
      border-radius: 50%;
      border: none;
      background-color: map-get($color, hover, background-color);
    }
    &::after {
      content: "";
      background-color: map-get($color, checked, background-color);
      position: absolute;
      top: -2px;
      left: -2px;
      right: -2px;
      bottom: -2px;
      font-size: 20px;
      line-height: 24px !important;
      border-radius: 50%;
      border:none;
      text-align: center;
    }
  }

}

// Base styles
@mixin radio($color) {
  //if border-color is none then set border to none
  @if map-get($color,unchecked, border-color) == none {
    border: none;
  }
  @else {
    border: 4px solid map-get($color,unchecked, border-color);
  }


  position: relative;
  display: inline-block;
  vertical-align: middle;
  width: 24px !important;
  height: 24px !important;
  margin-right: $spacing-1;
  border-radius: 50%;
  border-color: none;
  transition: all 0.2s ease-in-out;
}

$radio-color-schemes: (
  light,
  dark,
  high-contrast,
);

@each $color-scheme in $radio-color-schemes {
  $class-name: "radio_#{$color-scheme}";



  .radio_label_#{$color-scheme} {
    font-size: 16px;
    font-family: Montserrat;
    display: flex;
    margin-bottom: 0;
    align-items: center;
    flex-direction: row-reverse;
    color: map-get($radio-colors, $color-scheme, label, color);
    &:hover {
      cursor: pointer;
      color: map-get($radio-colors, $color-scheme, label, hover-color);
    }
  }
  
  .#{$class-name} {
    @include radio(map-get($radio-colors, $color-scheme));
    @include radio-state(map-get($radio-colors, $color-scheme));
  }

  //add input type radio to the class name

  input[type="radio"] .#{$class-name} {
      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none;
      outline: 0;
      height: 24px !important;
      width: 24px !important;
      border: 2px solid map-get($radio-colors, $color-scheme, unchecked, border-color);

    &:disabled {
      background-color: map-get($radio-colors, $color-scheme, disabled, background-color);
      border-color: map-get($radio-colors, $color-scheme, disabled, border-color);
      cursor: not-allowed;
      pointer-events: none;
    }

    &::before {
      content: "";
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      z-index: -1;
      width: 30px;
      height: 30px;
      border-radius: 50%;
      border: none;
      background-color: map-get($radio-colors, $color-scheme, hover, background-color);
    }

    &:focus-visible {
      border: 2px solid map-get($radio-colors, $color-scheme, focused, border-color);

      &::-moz-focus-inner {
        border: 0;
      }

      &:not(:checked):not(:disabled) {
        &::before {
          content: "";
          position: absolute;
          border:none;
        }
      }
    }
  }
}

//create a class for radio button for images

.radio-image {
  position: relative;
  display: inline-block;
  vertical-align: middle;
  width: 24px !important;
  height: 24px !important;
  margin-right: $spacing-1;
  border-radius: 50%;
  border-color: none;
  transition: all 0.2s ease-in-out;
  border: none;
  outline: none;
  background-color: none;
  background-image: url(../images/radio.png);
  background-repeat: no-repeat;
  background-position: center;
  background-size: 24px 24px;
  cursor: pointer;
}

//create radio label container class for vertical alignment and row alignment
.radio-label-container_row {
  display: flex;
  flex-direction: row;
  align-items: center;
  font-size: 16px;
  font-family: Montserrat;
  column-gap: 8px;
}

.radio-label-container_column {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  font-size: 16px;
  font-family: Montserrat;
  row-gap: 16px;
}



